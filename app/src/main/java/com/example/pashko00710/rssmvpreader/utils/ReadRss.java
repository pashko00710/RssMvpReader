package com.example.pashko00710.rssmvpreader.utils;import android.app.ProgressDialog;import android.content.Context;import android.os.AsyncTask;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import com.example.pashko00710.rssmvpreader.R;import com.example.pashko00710.rssmvpreader.core.model.ItemTalk;import com.example.pashko00710.rssmvpreader.ui.recyclerview.NewsAdapter;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;public class ReadRss extends AsyncTask<Void, Void, Void> {        Context context;        String address = ConstantsManager.TAG_ADRESS;        ProgressDialog progressDialog;        ArrayList<ItemTalk>feedItems;        RecyclerView recyclerView;        URL url;        public ReadRss(Context context, RecyclerView recyclerView) {                this.recyclerView=recyclerView;                this.context = context;                progressDialog = new ProgressDialog(context);                progressDialog.setMessage(context.getString(R.string.loading));        }        @Override        protected void onPreExecute() {                progressDialog.show();                super.onPreExecute();        }        @Override        protected void onPostExecute(Void aVoid) {                super.onPostExecute(aVoid);                progressDialog.dismiss();                NewsAdapter adapter=new NewsAdapter(context,feedItems);                recyclerView.setLayoutManager(new LinearLayoutManager(context));                recyclerView.setAdapter(adapter);        }        @Override        protected Void doInBackground(Void... params) {                processXml(getData());                return null;        }        private void processXml(Document data) {                if (data != null) {                feedItems=new ArrayList<>();                Element root = data.getDocumentElement();                Node channel = root.getChildNodes().item(1);                NodeList items = channel.getChildNodes();                for (int i = 0; i < items.getLength(); i++) {                Node cureentchild = items.item(i);                if (cureentchild.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_ITEM)) {                ItemTalk item=new ItemTalk();                NodeList itemchilds = cureentchild.getChildNodes();                for (int j = 0; j < itemchilds.getLength(); j++) {                Node cureent = itemchilds.item(j);                if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_TITLE)){                        item.setTitle(cureent.getTextContent());                }else if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_DESC)){                        item.setDescription(cureent.getTextContent());                }else if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_DATE)){                        item.setPubDate(cureent.getTextContent());                }else if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_LINK)){                        item.setLink(cureent.getTextContent());                }else if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_ENCLOSURE)){                //this will return us thumbnail url                String url=cureent.getAttributes().item(0).getTextContent();                        item.setThumbnailUrl(url);                }else if (cureent.getNodeName().equalsIgnoreCase(ConstantsManager.TAG_GUID)) {                        item.setGuid(cureent.getTextContent());                }                }                        feedItems.add(item);                }                }                }        }        public Document getData() {                try {                        url = new URL(address);                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();                        connection.setRequestMethod(ConstantsManager.TAG_REQUEST);                        InputStream inputStream = connection.getInputStream();                        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();                        DocumentBuilder builder = builderFactory.newDocumentBuilder();                        Document xmlDoc = builder.parse(inputStream);                        return xmlDoc;                } catch (Exception e) {                        e.printStackTrace();                        return null;                }        }}